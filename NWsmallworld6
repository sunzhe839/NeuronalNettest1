#sunzhe  http://ruggero.sci.yokohama-cu.ac.jp/


import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from mayavi import mlab
import random
def draw_graph3d(graph, graph_colormap='winter', bgcolor = (1, 1, 1),
                 node_size=0.03,
                 edge_color=(0.8, 0.8, 0.8), edge_size=0.002,
                 text_size=0.008, text_color=(0, 0, 0)):
    H=nx.Graph()
    H=graph
    G=nx.convert_node_labels_to_integers(H)

    graph_pos=nx.spring_layout(G, dim=3)

    # numpy array of x,y,z positions in sorted node order
    xyz=np.array([graph_pos[v] for v in sorted(G)])

    # scalar colors
    scalars=np.array(G.nodes())+5
    mlab.figure(1, bgcolor=bgcolor)
    mlab.clf()

    pts = mlab.points3d(xyz[:,0], xyz[:,1], xyz[:,2],
                        scalars,
                        scale_factor=node_size,
                        scale_mode='none',
                        colormap=graph_colormap,
                        resolution=20)

    for i, (x, y, z) in enumerate(xyz):
        label = mlab.text(x, y, str(i), z=z,
                          width=text_size, name=str(i), color=text_color)
        label.property.shadow = True

    pts.mlab_source.dataset.lines = np.array(G.edges())
    tube = mlab.pipeline.tube(pts, tube_radius=edge_size)
    mlab.pipeline.surface(tube, color=edge_color)

    mlab.show() # interactive window



def newman_watts_smallworld(n, k, p):
    """Return a Newman-Watts-Strogatz small world graph.

    Parameters
    ----------
    n : int
        The number of nodes
    k : int
        Each node is connected to k nearest neighbors in ring topology
    p : float
        The probability of adding a new edge for each edge
"""
    if k>=n:
        raise nx.NetworkXError("k>=n, choose smaller k or larger n")
    G=nx.empty_graph(n)
    G.name="newman_watts_smallworld%s,%s,%s)"%(n,k,p)
    nlist = G.nodes()
    fromv = nlist
    #print fromv
    # connect the 2*k neighbors
    for j in range(1, k+1):
        tov = fromv[j:] + fromv[0:j] # the first j are now last
        for i in range(len(fromv)):
            G.add_edge(fromv[i], tov[i])
    # for each edge u-v, with probability p, randomly select existing
    # node w and add new edge u-w
    e = G.edges()
    for (u, v) in e:
        if random.random() < p:
            w = random.choice(nlist)
            # no self-loops and reject if edge u-w exists
            # is that the correct NWS model?
            while w == u or G.has_edge(u, w):
                w = random.choice(nlist)
                if G.degree(u) >= n-1:
                    break # skip this rewiring
            else:
                G.add_edge(u,w)
    return G

if __name__ == '__main__':
    SmallworldG=newman_watts_smallworld(24,1,0.8)
    SmallworldA=nx.adjacency_matrix(SmallworldG) #small world matrix
    draw_graph3d(SmallworldG)

